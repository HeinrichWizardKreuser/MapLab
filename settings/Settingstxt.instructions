Instructions on how to use instructions

To use the software, you must add instructions to the settings.txt file. Here
are examples of how to:


- MapType
Describes the type of map the software must generate

Here are the amount of map types currently existing:
1) SqrMap - Grid map made up of sqrs
2) HexMap - Hexagonal map, like the Civilizations franchise
3) GlobeMap - 3Dimensional map of a planet
4) SiteMap - Most abstract type, a list of coordinates in certain dimension
             plane.

Examples

MapType: SqrMap
MapType: HexMap


- Dimensions
1) SqrMap

    Dimensions: 20x10 //Where width = 20 and height = 10


- ProcDirection
Describes the next coordinate the map generates

1) SqrMap
    ProcDirection: if(x<w-1?[x+1;y]:[0;y+1]) //standard nested forloop


- ProcStart
Describes the first position/coordinate that the map will generate at
    ProcStart: [0;0]
    ProcStart: [random*w;random*h]

- ProcEnd
Describes when the map stop producing
    ProcEnd: [w-1;h-1]
    ProcEnd: untildone // stops when the entire array has been generated

- ProcAlgorithm
Describes the next state that it will generate
    ProcAlgorithm: if(adj==0?(if(random>0.83?1:0)):(if(random>0.66?0:1)))

    adj is the largest sqr accessible by this sqr

- FirstState
    FirstState: 0
    FirstState: round(random*2)

- Symmetry
Two types of symmetry: Rotation and Reflection.

    Symmetry: rotate([0;90],90);rotate([0;180],180)
    Symmetry: rotate([0,90],90);reflect([0;180],180)

rotate() and reflect describes their respective commands, in the braces:
Before comma: [0;90] describes the less than 180 degree angle pie of the map
(in this case, all between the 0 degree line and the 90 degree line drawn from
the middle, thus the top right corner).
After comma: 90 describes the angle of the axis at which we would like to apply
the symmetry. In 90 case, it is over the x = 0 axis.


- Replace
Describes which states we would like to replace with what based on conditions in
order to patchfix the map

    Replace: replace(1,if(area<3?0:1));replace(0,if(area<3?1:0));

replace() must be the command for all replace commands. Inside braces:
Before comma: This is the state (may be double or integer) that we will be
looking out for and attempt to replace.
After comma: This function returns the state we would like to replace the state
with.

Variable:
area
    Area of the state's group

- ProcSet
Describes all states that the map may contain

    ProcSet: {0;1}
    ProcSet: [0;1]
    ProcSet: [-1;6)

{} braces mean that all states must be exactly the values inside them
    {0;1} means the map may only have points with state 0 or 1.
[ brackets on either ends means including the state closest to that bracket
    [0;1] means the map may include all numbers from 0 to 1 inclusive
( brackets on either ends means discluding the state closest to that bracket
    [-1;6) means the map may include -1 onwards but is capped just before 6

- Connect
Describes which states must be connected at all times

    Connect: 0

0 means that we need to make sure that all points with state 0 on the map can
access each other
